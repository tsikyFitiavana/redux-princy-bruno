{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar _require = require('./utilities.js'),\n    isFunc = _require.isFunc,\n    checkAndMakeDir = _require.checkAndMakeDir,\n    copyFile = _require.copyFile,\n    saveBufferToFile = _require.saveBufferToFile;\n/**\n * Returns Local function that moves the file to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath\n * @param {Object} options\n */\n\n\nvar moveFromTemp = function moveFromTemp(filePath, options) {\n  return function (successFunc, errorFunc) {\n    // Set errorFunc to the same value as successFunc for callback mode.\n    errorFunc = isFunc(errorFunc) ? errorFunc : successFunc; // Copy temporary file.\n\n    copyFile(options.tempFilePath, filePath, function (err) {\n      if (err) {\n        errorFunc(err);\n        return;\n      } // Delete temporary file.\n\n\n      fs.unlink(options.tempFilePath, function (err) {\n        if (err) {\n          errorFunc(err);\n        } else {\n          successFunc();\n        }\n      });\n    });\n  };\n};\n/**\n * Returns Local function that moves the file from buffer to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath\n * @param {Object} options\n */\n\n\nvar moveFromBuffer = function moveFromBuffer(filePath, options) {\n  return function (successFunc, errorFunc) {\n    // Set errorFunc to the same value as successFunc for callback mode.\n    errorFunc = isFunc(errorFunc) ? errorFunc : successFunc;\n    saveBufferToFile(options.buffer, filePath, function (err) {\n      if (err) {\n        errorFunc(err);\n      } else {\n        successFunc();\n      }\n    });\n  };\n};\n\nmodule.exports = function (options) {\n  var fileUploadOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    name: options.name,\n    data: options.buffer,\n    size: options.size,\n    encoding: options.encoding,\n    tempFilePath: options.tempFilePath,\n    truncated: options.truncated,\n    mimetype: options.mimetype,\n    md5: options.hash,\n    mv: function mv(filePath, callback) {\n      // Determine propper move function.\n      var moveFunc = options.buffer.length && !options.tempFilePath ? moveFromBuffer(filePath, options) : moveFromTemp(filePath, options); // Create a folder for file.\n\n      checkAndMakeDir(fileUploadOptions, filePath); // If callback is passed in, use the callback API, otherwise return a promise.\n\n      return isFunc(callback) ? moveFunc(callback) : new Promise(function (resolve, reject) {\n        return moveFunc(resolve, reject);\n      });\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}